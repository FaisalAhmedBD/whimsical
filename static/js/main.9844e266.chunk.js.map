{"version":3,"sources":["components/calendar.js","App.js","serviceWorker.js","index.js"],"names":["MONTHS","moment","months","WEEKDAYS","weekdaysShort","Calendar","props","renderCalendar","state","startWeek","month","endWeek","weeks","week","startingDate","startOf","push","className","key","Array","fill","map","__","day","clone","add","format","handleMonthChange","type","setState","endOf","subtract","totalWeeks","diff","this","console","log","onClick","dayName","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRAGMA,G,MAASC,IAAOC,UAAUC,EAAWF,IAAOG,gBAC7BC,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAQVC,eAAiB,WAIb,IAJoB,IAAD,EACmB,EAAKC,MAA5BC,GADI,EACXC,MADW,EACJD,WAAWE,EADP,EACOA,QAEtBC,EAAQ,GAHO,WAIVC,GACL,IAAIC,EAAeb,MAASY,KAAKA,GAAME,QAAQ,QAC/CH,EAAMI,KACF,yBAAKC,UAAS,WAAcC,IAAKL,GAC5BM,MAAM,GAAGC,KAAK,GAAGC,KAAI,SAACC,EAAIC,GAAL,OAAa,yBAAKL,IAAKL,EAAOU,EAAKN,UAAU,OAAOH,EAAaU,QAAQC,IAAIF,EAAK,OAAOG,OAAO,YAJzHb,EAAOJ,EAAWI,GAAQF,EAASE,IAAS,EAA5CA,GAQT,OAAOD,GArBQ,EAwBnBe,kBAAoB,SAACC,GACJ,cAATA,EACA,EAAKC,UAAS,SAAArB,GACV,MAAO,CACHE,MAAOT,MAASS,MAAT,UAAkBF,EAAME,QAASe,IAAI,EAAG,UAAUf,QACzDD,UAAWR,MAASS,MAAT,UAAkBF,EAAME,QAASe,IAAI,EAAG,UAAUV,QAAQ,SAASF,OAC9EF,QAASV,MAASS,MAAT,UAAkBF,EAAME,QAASe,IAAI,EAAG,UAAUK,MAAM,SAASjB,WAGlE,cAATe,GACP,EAAKC,UAAS,SAAArB,GACV,MAAO,CACHE,MAAOT,MAASS,MAAT,UAAkBF,EAAME,QAASqB,SAAS,EAAG,UAAUrB,QAC9DD,UAAWR,MAASS,MAAT,UAAkBF,EAAME,QAASqB,SAAS,EAAG,UAAUhB,QAAQ,SAASF,OACnFF,QAASV,MAASS,MAAT,UAAkBF,EAAME,QAASqB,SAAS,EAAG,UAAUD,MAAM,SAASjB,YApC3F,EAAKL,MAAQ,CACTE,MAAOT,MAASS,QAChBD,UAAWR,MAASc,QAAQ,SAASF,OACrCF,QAASV,MAAS6B,MAAM,SAASjB,OACjCmB,WAAY/B,MAASS,MAAM,MAAMoB,MAAM,SAASG,KAAKhC,MAASS,MAAM,KAAKK,QAAQ,SAAU,SANhF,E,sEA6CT,IAAD,OACGL,EAAUwB,KAAK1B,MAAfE,MAER,OADAyB,QAAQC,IAAI,gBAAiBF,KAAK1B,OAE9B,yBAAKS,UAAS,YACV,yBAAKA,UAAU,oBACX,4BAAKjB,EAAOU,IAGZ,4BAAQ2B,QAAS,kBAAM,EAAKV,kBAAkB,eAA9C,QACA,4BAAQU,QAAS,kBAAM,EAAKV,kBAAkB,eAA9C,SAGJ,yBAAKV,UAAU,2BACVd,EAASkB,KAAI,SAAAiB,GAAO,OACjB,yBAAKpB,IAAKoB,EAASrB,UAAU,OAAOqB,OAG3CJ,KAAK3B,sB,GAhEgBgC,IAAMC,WCO7BC,MARf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,QCMcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9844e266.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport '../styles/calendar.scss';\nconst MONTHS = moment.months(), WEEKDAYS = moment.weekdaysShort();\nexport default class Calendar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            month: moment().month(),\n            startWeek: moment().startOf('month').week(),\n            endWeek: moment().endOf('month').week(),\n            totalWeeks: moment().month('11').endOf('month').diff(moment().month('0').startOf('month'), 'week')\n        }\n    }\n    renderCalendar = () => {\n        const { month, startWeek, endWeek } = this.state;\n\n        let weeks = [];\n        for (let week = startWeek; week <= endWeek; week++) {\n            let startingDate = moment().week(week).startOf('week')\n            weeks.push(\n                <div className={`week-row`} key={week}>\n                    {Array(7).fill(0).map((__, day) => <div key={week + day} className=\"day\">{startingDate.clone().add(day, 'day').format('D')}</div>)}\n                </div>\n            )\n        }\n        return weeks;\n    }\n\n    handleMonthChange = (type) => {\n        if (type === 'nextMonth') {\n            this.setState(state => {\n                return {\n                    month: moment().month(`${state.month}`).add(1, 'months').month(),\n                    startWeek: moment().month(`${state.month}`).add(1, 'months').startOf('month').week(),\n                    endWeek: moment().month(`${state.month}`).add(1, 'months').endOf('month').week()\n                }\n            })\n        } else if (type === 'prevMonth') {\n            this.setState(state => {\n                return {\n                    month: moment().month(`${state.month}`).subtract(1, 'months').month(),\n                    startWeek: moment().month(`${state.month}`).subtract(1, 'months').startOf('month').week(),\n                    endWeek: moment().month(`${state.month}`).subtract(1, 'months').endOf('month').week()\n                }\n            })\n        }\n\n    }\n\n    render() {\n        const { month } = this.state;\n        console.log('this state : ', this.state)\n        return (\n            <div className={`calendar`}>\n                <div className=\"calendar-caption\">\n                    <h1>{MONTHS[month]}</h1>\n                    {/* <button onClick={() => this.setState({ month: month - 1 })}>prev</button>\n                    <button onClick={() => this.setState({ month: month + 1 })}>next</button> */}\n                    <button onClick={() => this.handleMonthChange('prevMonth')}>prev</button>\n                    <button onClick={() => this.handleMonthChange('nextMonth')}>next</button>\n                </div>\n\n                <div className=\"week-days-name week-row\">\n                    {WEEKDAYS.map(dayName => (\n                        <div key={dayName} className=\"day\">{dayName}</div>\n                    ))}\n                </div>\n                {this.renderCalendar()}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport { Calendar } from './components'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calendar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}